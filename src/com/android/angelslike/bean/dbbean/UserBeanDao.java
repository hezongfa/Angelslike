package com.android.angelslike.bean.dbbean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.angelslike.bean.dbbean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_BEAN.
*/
public class UserBeanDao extends AbstractDao<UserBean, Void> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Unionid = new Property(2, String.class, "unionid", false, "UNIONID");
        public final static Property Img = new Property(3, String.class, "img", false, "IMG");
        public final static Property Userid = new Property(4, long.class, "userid", false, "USERID");
        public final static Property Mregistrationtime = new Property(5, long.class, "mregistrationtime", false, "MREGISTRATIONTIME");
        public final static Property Sex = new Property(6, long.class, "sex", false, "SEX");
        public final static Property Loginkey = new Property(7, String.class, "loginkey", false, "LOGINKEY");
        public final static Property Logins = new Property(8, String.class, "logins", false, "LOGINS");
        public final static Property City = new Property(9, String.class, "city", false, "CITY");
        public final static Property Mfen = new Property(10, String.class, "mfen", false, "MFEN");
        public final static Property Address = new Property(11, String.class, "address", false, "ADDRESS");
        public final static Property Dis = new Property(12, String.class, "dis", false, "DIS");
        public final static Property Name = new Property(13, String.class, "name", false, "NAME");
        public final static Property Yanvalue = new Property(14, String.class, "yanvalue", false, "YANVALUE");
        public final static Property Money = new Property(15, String.class, "money", false, "MONEY");
        public final static Property Pro = new Property(16, String.class, "pro", false, "PRO");
        public final static Property Fen = new Property(17, String.class, "fen", false, "FEN");
        public final static Property Openid = new Property(18, String.class, "openid", false, "OPENID");
        public final static Property User = new Property(19, String.class, "user", false, "USER");
        public final static Property Qq = new Property(20, String.class, "qq", false, "QQ");
        public final static Property Isadmin = new Property(21, String.class, "isadmin", false, "ISADMIN");
    };


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_BEAN' (" + //
                "'ID' INTEGER NOT NULL UNIQUE ," + // 0: id
                "'PHONE' TEXT NOT NULL ," + // 1: phone
                "'UNIONID' TEXT NOT NULL ," + // 2: unionid
                "'IMG' TEXT NOT NULL ," + // 3: img
                "'USERID' INTEGER NOT NULL ," + // 4: userid
                "'MREGISTRATIONTIME' INTEGER NOT NULL ," + // 5: mregistrationtime
                "'SEX' INTEGER NOT NULL ," + // 6: sex
                "'LOGINKEY' TEXT NOT NULL ," + // 7: loginkey
                "'LOGINS' TEXT NOT NULL ," + // 8: logins
                "'CITY' TEXT NOT NULL ," + // 9: city
                "'MFEN' TEXT NOT NULL ," + // 10: mfen
                "'ADDRESS' TEXT NOT NULL ," + // 11: address
                "'DIS' TEXT NOT NULL ," + // 12: dis
                "'NAME' TEXT NOT NULL ," + // 13: name
                "'YANVALUE' TEXT NOT NULL ," + // 14: yanvalue
                "'MONEY' TEXT NOT NULL ," + // 15: money
                "'PRO' TEXT NOT NULL ," + // 16: pro
                "'FEN' TEXT NOT NULL ," + // 17: fen
                "'OPENID' TEXT NOT NULL ," + // 18: openid
                "'USER' TEXT NOT NULL ," + // 19: user
                "'QQ' TEXT NOT NULL ," + // 20: qq
                "'ISADMIN' TEXT NOT NULL );"); // 21: isadmin
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getPhone());
        stmt.bindString(3, entity.getUnionid());
        stmt.bindString(4, entity.getImg());
        stmt.bindLong(5, entity.getUserid());
        stmt.bindLong(6, entity.getMregistrationtime());
        stmt.bindLong(7, entity.getSex());
        stmt.bindString(8, entity.getLoginkey());
        stmt.bindString(9, entity.getLogins());
        stmt.bindString(10, entity.getCity());
        stmt.bindString(11, entity.getMfen());
        stmt.bindString(12, entity.getAddress());
        stmt.bindString(13, entity.getDis());
        stmt.bindString(14, entity.getName());
        stmt.bindString(15, entity.getYanvalue());
        stmt.bindString(16, entity.getMoney());
        stmt.bindString(17, entity.getPro());
        stmt.bindString(18, entity.getFen());
        stmt.bindString(19, entity.getOpenid());
        stmt.bindString(20, entity.getUser());
        stmt.bindString(21, entity.getQq());
        stmt.bindString(22, entity.getIsadmin());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // phone
            cursor.getString(offset + 2), // unionid
            cursor.getString(offset + 3), // img
            cursor.getLong(offset + 4), // userid
            cursor.getLong(offset + 5), // mregistrationtime
            cursor.getLong(offset + 6), // sex
            cursor.getString(offset + 7), // loginkey
            cursor.getString(offset + 8), // logins
            cursor.getString(offset + 9), // city
            cursor.getString(offset + 10), // mfen
            cursor.getString(offset + 11), // address
            cursor.getString(offset + 12), // dis
            cursor.getString(offset + 13), // name
            cursor.getString(offset + 14), // yanvalue
            cursor.getString(offset + 15), // money
            cursor.getString(offset + 16), // pro
            cursor.getString(offset + 17), // fen
            cursor.getString(offset + 18), // openid
            cursor.getString(offset + 19), // user
            cursor.getString(offset + 20), // qq
            cursor.getString(offset + 21) // isadmin
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPhone(cursor.getString(offset + 1));
        entity.setUnionid(cursor.getString(offset + 2));
        entity.setImg(cursor.getString(offset + 3));
        entity.setUserid(cursor.getLong(offset + 4));
        entity.setMregistrationtime(cursor.getLong(offset + 5));
        entity.setSex(cursor.getLong(offset + 6));
        entity.setLoginkey(cursor.getString(offset + 7));
        entity.setLogins(cursor.getString(offset + 8));
        entity.setCity(cursor.getString(offset + 9));
        entity.setMfen(cursor.getString(offset + 10));
        entity.setAddress(cursor.getString(offset + 11));
        entity.setDis(cursor.getString(offset + 12));
        entity.setName(cursor.getString(offset + 13));
        entity.setYanvalue(cursor.getString(offset + 14));
        entity.setMoney(cursor.getString(offset + 15));
        entity.setPro(cursor.getString(offset + 16));
        entity.setFen(cursor.getString(offset + 17));
        entity.setOpenid(cursor.getString(offset + 18));
        entity.setUser(cursor.getString(offset + 19));
        entity.setQq(cursor.getString(offset + 20));
        entity.setIsadmin(cursor.getString(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(UserBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(UserBean entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
